{"version":3,"file":"p2pt.es.js","sources":["../p2pt.ts"],"sourcesContent":["/**\n * Peer 2 Peer WebRTC connections with WebTorrent Trackers as signalling server\n * Copyright Subin Siby <mail@subinsb.com>, 2020\n * Licensed under MIT\n */\n\n// @ts-ignore\nimport WebSocketTracker from \"bittorrent-tracker/lib/client/websocket-tracker\";\nimport randombytes from \"randombytes\";\nimport EventEmitter from \"events\";\nimport sha1 from \"simple-sha1\";\nimport debugFunction from \"debug\";\nimport SimplePeer from \"simple-peer\";\nimport { nanoid } from \"nanoid\";\n\nconst debug = debugFunction(\"p2pt\");\n\n/**\n * This character would be prepended to easily identify JSON msgs\n */\nconst JSON_MESSAGE_IDENTIFIER = \"^\";\n\n/**\n * WebRTC data channel limit beyond which data is split into chunks\n * Chose 16KB considering Chromium\n * https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Using_data_channels#Concerns_with_large_messages\n */\nconst MAX_MESSAGE_LENGTH = 16000;\n\ntype RespondFunction = (msg: any) => Promise<[peer: Peer, msg: string]>;\n\ninterface AnnounceOpts {\n    numwant: number | null;\n    uploaded: number | null;\n    downloaded: number | null;\n}\n\ninterface DataMessage {\n    id: string;\n    msg: string;\n    o: boolean;\n    c?: number;\n    last?: boolean;\n}\n\n/**\n * Websocket tracker is adding id to the SimplePeer object\n */\ninterface Peer extends SimplePeer.Instance {\n    id: string;\n    channelName: string;\n    respond: RespondFunction;\n}\n\nexport class P2PT extends EventEmitter {\n    announceURLs: string[];\n    trackers: { [key: string]: any };\n    peers: { [peerId: string]: { [channel: string]: Peer } };\n    msgChunks: { [key: string]: any };\n    responseWaiting: {\n        [peerId: string]: {\n            [msgId: string]: (data: [peer: Peer, msg: string]) => void;\n        };\n    };\n    _peerIdBuffer: Buffer;\n    _peerId: string;\n    _peerIdBinary: string;\n    identifier?: string;\n    infoHash?: string;\n    _infoHashBuffer?: Buffer;\n    _infoHashBinary?: string;\n    _wrtc?: any;\n\n    /**\n     *\n     * @param array announceURLs List of announce tracker URLs\n     * @param string identifierString Identifier used to discover peers in the network\n     */\n    constructor(announceURLs = [], identifierString = \"\") {\n        super();\n\n        this.announceURLs = announceURLs;\n        this.trackers = {};\n        this.peers = {};\n        this.msgChunks = {};\n        this.responseWaiting = {};\n\n        if (identifierString) {\n            this.setIdentifier(identifierString);\n        }\n\n        this._peerIdBuffer = randombytes(20);\n        this._peerId = this._peerIdBuffer.toString(\"hex\");\n        this._peerIdBinary = this._peerIdBuffer.toString(\"binary\");\n\n        debug(\"my peer id: \" + this._peerId);\n    }\n\n    /**\n     * Set the identifier string used to discover peers in the network\n     * @param string identifierString\n     */\n    setIdentifier(identifier: string) {\n        this.identifier = identifier;\n        this.infoHash = sha1.sync(identifier).toLowerCase();\n        this._infoHashBuffer = Buffer.from(this.infoHash, \"hex\");\n        this._infoHashBinary = this._infoHashBuffer.toString(\"binary\");\n    }\n\n    /**\n     * Connect to network and start discovering peers\n     */\n    start() {\n        this.on(\"peer\", (peer: Peer) => {\n            const newPeer = !this.peers[peer.id];\n\n            if (newPeer) {\n                this.peers[peer.id] = {};\n                this.responseWaiting[peer.id] = {};\n            }\n\n            peer.on(\"connect\", () => {\n                /**\n                 * Multiple data channels to one peer is possible\n                 * The `peer` object actually refers to a peer with a data channel. Even though it may have same `id` (peerID) property, the data channel will be different. Different trackers giving the same \"peer\" will give the `peer` object with different channels.\n                 * We will store all channels as backups in case any one of them fails\n                 * A peer is removed if all data channels become unavailable\n                 */\n                this.peers[peer.id][peer.channelName] = peer;\n\n                if (newPeer) {\n                    this.emit(\"peerconnect\", peer);\n                }\n            });\n\n            peer.on(\"data\", (data: any) => {\n                this.emit(\"data\", peer, data);\n\n                data = data.toString();\n\n                debug(\"got a message from \" + peer.id);\n\n                if (data[0] === JSON_MESSAGE_IDENTIFIER) {\n                    try {\n                        data = JSON.parse(data.slice(1));\n\n                        // A respond function\n                        // peer.respond = this._peerRespond(peer, data.id);\n\n                        let msg = this._chunkHandler(data);\n\n                        // msg fully retrieved\n                        if (msg !== false) {\n                            if (data.o) {\n                                msg = JSON.parse(msg);\n                            }\n\n                            /**\n                             * If there's someone waiting for a response, call them\n                             */\n                            if (this.responseWaiting[peer.id][data.id]) {\n                                this.responseWaiting[peer.id][data.id]([\n                                    peer,\n                                    msg,\n                                ]);\n                                delete this.responseWaiting[peer.id][data.id];\n                            } else {\n                                this.emit(\"msg\", peer, msg);\n                            }\n                            this._destroyChunks(data.id);\n                        }\n                    } catch (e) {\n                        console.log(e);\n                    }\n                }\n            });\n\n            peer.on(\"error\", (err: Error) => {\n                this._removePeer(peer);\n                debug(\"Error in connection : \" + err);\n            });\n\n            peer.on(\"close\", () => {\n                this._removePeer(peer);\n                debug(\"Connection closed with \" + peer.id);\n            });\n        });\n\n        // Tracker responded to the announce request\n        this.on(\"update\", (response) => {\n            const tracker =\n                this.trackers[this.announceURLs.indexOf(response.announce)];\n\n            this.emit(\"trackerconnect\", tracker, this.getTrackerStats());\n        });\n\n        // Errors in tracker connection\n        this.on(\"warning\", (err) => {\n            this.emit(\"trackerwarning\", err, this.getTrackerStats());\n        });\n\n        this._fetchPeers();\n    }\n\n    /**\n     * Add a tracker\n     * @param string announceURL Tracker Announce URL\n     */\n    addTracker(announceURL: string) {\n        if (this.announceURLs.indexOf(announceURL) !== -1) {\n            throw new Error(\"Tracker already added\");\n        }\n\n        const key = this.announceURLs.push(announceURL);\n\n        this.trackers[key] = new WebSocketTracker(this, announceURL);\n        this.trackers[key].announce(this._defaultAnnounceOpts());\n    }\n\n    /**\n     * Remove a tracker without destroying peers\n     */\n    removeTracker(announceURL: string) {\n        const key = this.announceURLs.indexOf(announceURL);\n\n        if (key === -1) {\n            throw new Error(\"Tracker does not exist\");\n        }\n\n        // hack to not destroy peers\n        this.trackers[key].peers = [];\n        this.trackers[key].destroy();\n\n        delete this.trackers[key];\n        delete this.announceURLs[key];\n    }\n\n    /**\n     * Remove a peer from the list if all channels are closed\n     * @param integer id Peer ID\n     */\n    _removePeer(peer: Peer) {\n        if (!this.peers[peer.id]) {\n            return false;\n        }\n\n        delete this.peers[peer.id][peer.channelName];\n\n        // All data channels are gone. Peer lost\n        if (Object.keys(this.peers[peer.id]).length === 0) {\n            this.emit(\"peerclose\", peer);\n\n            delete this.responseWaiting[peer.id];\n            delete this.peers[peer.id];\n        }\n\n        return true;\n    }\n\n    /**\n     * Send a msg and get response for it\n     * @param Peer peer simple-peer object to send msg to\n     * @param string msg Message to send\n     * @param integer msgID ID of message if it's a response to a previous message\n     */\n    send(peer: Peer, msg: string | object, msgID = \"\") {\n        return new Promise<[peer: Peer, msg: string]>((resolve, reject) => {\n            let data: DataMessage = {\n                id: msgID !== \"\" ? msgID : nanoid(),\n                msg: typeof msg === \"object\" ? JSON.stringify(msg) : msg,\n                o: typeof msg === \"object\",\n            };\n\n            try {\n                /**\n                 * Maybe peer channel is closed, so use a different channel if available\n                 * Array should atleast have one channel, otherwise peer connection is closed\n                 */\n                if (!peer.connected) {\n                    for (const index in this.peers[peer.id]) {\n                        peer = this.peers[peer.id][index];\n\n                        if (peer.connected) break;\n                    }\n                }\n\n                if (!this.responseWaiting[peer.id]) {\n                    this.responseWaiting[peer.id] = {};\n                }\n                this.responseWaiting[peer.id][data.id] = resolve;\n            } catch (e) {\n                return reject(Error(\"Connection to peer closed\" + e));\n            }\n\n            let chunks = 0;\n            let remaining = \"\";\n            while (data.msg.length > 0) {\n                data.c = chunks;\n\n                remaining = data.msg.slice(MAX_MESSAGE_LENGTH);\n                data.msg = data.msg.slice(0, MAX_MESSAGE_LENGTH);\n\n                if (!remaining) {\n                    data.last = true;\n                }\n\n                peer.send(JSON_MESSAGE_IDENTIFIER + JSON.stringify(data));\n\n                data.msg = remaining;\n                chunks++;\n            }\n\n            debug(\"sent a message to \" + peer.id);\n        });\n    }\n\n    /**\n     * Request more peers\n     */\n    requestMorePeers() {\n        return new Promise((resolve) => {\n            for (const key in this.trackers) {\n                this.trackers[key].announce(this._defaultAnnounceOpts());\n            }\n            resolve(this.peers);\n        });\n    }\n\n    /**\n     * Get basic stats about tracker connections\n     */\n    getTrackerStats() {\n        let connectedCount = 0;\n        for (const key in this.trackers) {\n            if (\n                this.trackers[key].socket &&\n                this.trackers[key].socket.connected\n            ) {\n                connectedCount++;\n            }\n        }\n\n        return {\n            connected: connectedCount,\n            total: this.announceURLs.length,\n        };\n    }\n\n    /**\n     * Destroy object\n     */\n    destroy() {\n        let key;\n        for (key in this.peers) {\n            for (const key2 in this.peers[key]) {\n                this.peers[key][key2].destroy();\n            }\n        }\n        for (key in this.trackers) {\n            this.trackers[key].destroy();\n        }\n    }\n\n    /**\n     * A custom function binded on Peer object to easily respond back to message\n     * @param Peer peer Peer to send msg to\n     * @param integer msgID Message ID\n     */\n    _peerRespond(peer: Peer, msgID: string) {\n        return (msg: string) => {\n            return this.send(peer, msg, msgID);\n        };\n    }\n\n    /**\n     * Handle msg chunks. Returns false until the last chunk is received. Finally returns the entire msg\n     * @param object data\n     */\n    _chunkHandler(data: any) {\n        if (!this.msgChunks[data.id]) {\n            this.msgChunks[data.id] = [];\n        }\n\n        this.msgChunks[data.id][data.c] = data.msg;\n\n        if (data.last) {\n            const completeMsg = this.msgChunks[data.id].join(\"\");\n            return completeMsg;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Remove all stored chunks of a particular message\n     * @param integer msgID Message ID\n     */\n    _destroyChunks(msgID: string) {\n        delete this.msgChunks[msgID];\n    }\n\n    /**\n     * Default announce options\n     * @param object opts Options\n     */\n    _defaultAnnounceOpts(opts?: Partial<AnnounceOpts>): AnnounceOpts {\n        return {\n            numwant: opts?.numwant ?? 50,\n            uploaded: opts?.uploaded ?? 0,\n            downloaded: opts?.downloaded ?? 0,\n        };\n    }\n\n    /**\n     * Initialize trackers and fetch peers\n     */\n    _fetchPeers() {\n        for (const key in this.announceURLs) {\n            this.trackers[key] = new WebSocketTracker(\n                this,\n                this.announceURLs[key]\n            );\n            this.trackers[key].announce(this._defaultAnnounceOpts());\n        }\n    }\n}\n"],"names":[],"mappings":"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"}